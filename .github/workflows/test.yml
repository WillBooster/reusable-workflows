name: Test

on:
  workflow_call:
    inputs:
      dot_env_path:
        required: false
        type: string
      node_version_matrix_json:
        required: false
        type: string
      non_self_hosted:
        required: false
        type: boolean
    secrets:
      DOT_ENV:
        required: false

jobs:
  pre:
    runs-on: ${{ (inputs.non_self_hosted && 'ubuntu-latest') || fromJSON('["self-hosted", "large"]') }}
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: false
          skip_after_successful_duplicate: true
          concurrent_skipping: same_content_newer
          paths_ignore: '["**/*.md", "**/docs/**"]'
  detect-node-version-matrix:
    needs: pre
    if: ${{ needs.pre.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    outputs:
      json: ${{ steps.detect-node-version-matrix.outputs.json }}
    steps:
      - uses: actions/checkout@v2
      - id: detect-node-version-matrix
        run: |
          CONSTRAINT=$(node -e "console.log(((require('./package.json') || {}).engines || {}).node)")
          NODE_VERSIONS=$(npx -y semver -r "$CONSTRAINT" 12.0.0 14.0.0 16.0.0 | xargs | sed 's/ /","/g' | sed 's/\.0\.0//g')
          if [[ ! -z "$NODE_VERSIONS" ]]; then
            NODE_VERSIONS_JSON=$(echo "[\"$NODE_VERSIONS\"]")
          else
            NODE_VERSIONS_JSON=[""]
          fi
          echo "::set-output name=json::$NODE_VERSIONS_JSON"
  test:
    needs: detect-node-version-matrix
    runs-on: ${{ (inputs.non_self_hosted && 'ubuntu-latest') || fromJSON('["self-hosted", "large"]') }}
    strategy:
      matrix:
        # c.f. https://github.community/t/reusable-workflow-with-strategy-matrix/205676
        node-version: ${{ fromJson(inputs.node_version_matrix_json || needs.detect-node-version-matrix.outputs.json) }}
    steps:
      - uses: fkirc/skip-duplicate-actions@master
        with:
          cancel_others: true
      - uses: actions/checkout@v2
      - if: ${{ inputs.dot_env_path }}
        run: echo "${{ secrets.DOT_ENV }}" > ${{ inputs.dot_env_path }}

      - id: get-ver
        run: |
          if ! [[ -f .tool-versions ]]; then
            echo "::set-output name=node::$(cat .node-version || echo 16)"
          fi
      - if: ${{ matrix.node-version || steps.get-ver.outputs.node }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version || steps.get-ver.outputs.node }}
      - if: ${{ ! steps.get-ver.outputs.node }}
        uses: willbooster/asdf-actions/install@main
      - name: Show environment information
        id: env-info
        # https://stackoverflow.com/a/677212
        run: |
          echo "node: $(node -v)"
          echo "yarn: $(yarn -v)"
          if command -v python &> /dev/null; then echo "python: $(python --version)"; fi
          if command -v poetry &> /dev/null; then echo "poetry: $(poetry -v)"; fi
          if command -v gcloud &> /dev/null; then echo "gcloud: $(gcloud -v 2>&1 | head -n 1)"; fi
          if [[ "$(yarn -v)" == "1."* ]]; then
            echo "::set-output name=yarn-dir::$(yarn cache dir)"
          fi

      - if: ${{ steps.env-info.outputs.yarn-dir }}
        uses: actions/cache@v2
        with:
          path: ${{ steps.env-info.outputs.yarn-dir }}
          key: ${{ runner.os }}-yarn-v1-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v1-
      - uses: actions/cache@v2
        with:
          path: .yarn
          key: ${{ runner.os }}-yarn-berry-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-berry-
      - uses: actions/cache@v2
        with:
          path: ~/.cache/firebase/emulators
          key: ${{ runner.os }}-firebase-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-firebase-
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('packages/recommender/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - run: yarn install
      - run: if [[ "$(cat package.json)" == *'"setup":'* ]]; then yarn setup; fi
      - run: if [[ "$(cat package.json)" == *'"typecheck":'* ]]; then yarn typecheck; fi
      - run: if [[ "$(cat package.json)" == *'"lint":'* ]]; then yarn lint; fi
      - run: if [[ "$(cat package.json)" == *'"test":'* ]]; then yarn test; fi
      - run: if [[ "$(cat package.json)" == *'"build":'* ]]; then yarn build; fi
